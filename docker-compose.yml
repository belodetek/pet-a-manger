version: '2.4'

networks: {}

volumes:
  resin-data: {}

x-common: &common
  tty: true
  restart: unless-stopped

services:
  iserve:
    image: arm32v6/traefik:v2.9
    command:
      - --accesslog=true
      - --entrypoints.web.address=:80
      - --log.level=DEBUG
      - --providers.docker.endpoint=unix:///var/run/balena.sock
      - --providers.docker.exposedbydefault=false
      - --providers.docker=true
    ports:
      - "80:80"
    labels:
      io.balena.features.balena-socket: '1'

  # https://github.com/mcuadros/ofelia
  iwait:
    build:
      context: iwait
    depends_on:
      - ifeed
    healthcheck:
      test: |
        name="$(docker ps -q --filter 'name=ifeed*' --format '{{.Names}}')" \
          && grep -q ${name} /etc/ofelia.conf \
          && pgrep ofelia

      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 30s
    <<: *common
    restart: always
    labels:
      io.balena.features.balena-socket: '1'

  ifeed:
    build:
      context: ifeed
    <<: *common
    restart: always
    entrypoint:
      - /bin/bash
      - -c
    command:
      - |
        set -axe

        function cleanup() {
            sleep infinity
        }
        trap cleanup EXIT

        exec ./main.py

    healthcheck:
      test: pgrep python3.10
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 30s

    devices:
      - /dev/gpiomem
      - /dev/mem
    labels:
      io.balena.features.sysfs: '1'
      io.balena.update.strategy: 'kill-then-download'
      io.resin.features.kernel-modules: '1'

  istream:
    build:
      context: istream
    <<: *common
    entrypoint:
      - /bin/bash
      - -c
    command:
      - |
        set -axe

        function cleanup() {
            rm -f "${ISTREAM_STILL}"
            sleep infinity
        }
        trap cleanup EXIT

        ISTREAM_H264_PROFILE=${H264_PROFILE:-main}
        ISTREAM_VIDEO_WIDTH=${VIDEO_WIDTH:-320}
        ISTREAM_VIDEO_HEIGHT=${VIDEO_HEIGHT:-192}
        ISTREAM_VIDEO_FRAMERATE=${VIDEO_FRAMERATE:-15}
        ISTREAM_VIDEO_BITRATE=${VIDEO_BITRATE:-250000}
        ISTREAM_KEYFRAME_RATE=${KEYFRAME_RATE:-30}
        ISTREAM_AUDIO_SAMPLE_RATE=${ISTREAM_AUDIO_SAMPLE_RATE:-44100}  # audio not used
        ISTREAM_IMAGE_HEIGHT=${ISTREAM_IMAGE_HEIGHT:-1280}
        ISTREAM_IMAGE_WIDTH=${ISTREAM_IMAGE_WIDTH:-960}
        ISTREAM_IMAGE_ROTATE=${ISTREAM_IMAGE_ROTATE:-90}
        ISTREAM_IMAGE_ANNOTATE=${ISTREAM_IMAGE_ANNOTATE:-1024}

        # https://medium.com/@allanlei/streaming-your-raspberrypi-camera-6ad02edcaae7
        if [[ -n "$ISTREAM_RTMP_URL" ]]; then
            exec raspivid -n -t 0 -fl -hf -o - \
              -w "${ISTREAM_VIDEO_WIDTH}" \
              -h "${ISTREAM_VIDEO_HEIGHT}" \
              -fps "${ISTREAM_VIDEO_FRAMERATE}" \
              -b "${ISTREAM_VIDEO_BITRATE}" \
              -pf "${ISTREAM_H264_PROFILE}" \
              -g "${ISTREAM_KEYFRAME_RATE}" \
              | ffmpeg \
              -f lavfi \
              -i "anullsrc=channel_layout=stereo:sample_rate=${ISTREAM_AUDIO_SAMPLE_RATE}" \
              -i pipe:0 \
              -c:v copy \
              -c:a aac \
              -strict experimental \
              -f flv "${ISTREAM_RTMP_URL}"

        # capture and serve stills
        elif [[ -n "$ISTREAM_STILL" ]]; then
            webroot="$(dirname "${ISTREAM_STILL}")"
            test -f "${webroot}/favicon.ico" || ln -s /root/favicon.ico ${webroot}/favicon.ico
            nweb 80 "${webroot}"
            pgrep nweb
            raspistill --settings
            while true; do
                raspistill --verbose --nopreview \
                  --output "${ISTREAM_STILL}" \
                  --width "${ISTREAM_IMAGE_WIDTH}" \
                  --height "${ISTREAM_IMAGE_HEIGHT}" \
                  --rotation "${ISTREAM_IMAGE_ROTATE}" \
                  --annotate "${ISTREAM_IMAGE_ANNOTATE}" \
                  --timelapse 60000 \
                  --timeout 3600000
            done
        else
            false
        fi

    devices:
      - /dev/vchiq
      - /dev/video0
      - /dev/dma_heap
      - /dev/vcsm-cma
    labels:
      io.balena.features.sysfs: '1'
      io.balena.update.strategy: 'kill-then-download'
      io.resin.features.kernel-modules: '1'
      traefik.enable: 'true'
      traefik.http.routers.istream.entrypoints: 'web'
      # https://community.traefik.io/t/how-to-match-for-file-extension-at-end-of-path/16838/3
      traefik.http.routers.istream.rule: 'Path(`/{path:(?i:.*\.(jpeg|jpg|png)$)}`)'
      traefik.http.services.istream.loadbalancer.server.port: '80'

  iwatch:
    build:
      context: iwatch
    <<: *common
    entrypoint:
      - /bin/bash
      - -c
    command:
      - |
        set -axe

        function cleanup() {
            sleep infinity
        }
        trap cleanup EXIT

        if [[ -z "$IWATCH_REDIRECT_URL" ]] && [[ -n "$ISTREAM_STILL" ]]; then
            IWATCH_REDIRECT_URL="https://${BALENA_DEVICE_UUID}.balena-devices.com/$(basename "${ISTREAM_STILL}")"
        fi

        # serve static HTML
        # https://funprojects.blog/2021/04/11/a-web-server-in-1-line-of-bash/
        if [[ -n "$IWATCH_STATIC_HTML" ]]; then
            echo "${IWATCH_STATIC_HTML}" > iwatch.html
            while true; do
                echo -e 'HTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n' \
                  | cat - iwatch.html | nc -l -p 8080 -q 0; sleep 1s;
            done

        # .. or serve HTTP redirect
        elif [[ -n "$IWATCH_REDIRECT_URL" ]]; then
            while true; do
                echo -e "HTTP/1.1 302 Found\r\nLocation: ${IWATCH_REDIRECT_URL}\r\nConnection: close\r\n\r\n" \
                  | nc -l -p 80 -q 0; sleep 1s;
            done

        else
            false
        fi

    labels:
      io.balena.update.strategy: 'kill-then-download'
      traefik.enable: 'true'
      traefik.http.routers.iwatch.entrypoints: 'web'
      traefik.http.routers.iwatch.rule: 'Path(`/`)'
      traefik.http.services.iwatch.loadbalancer.server.port: '80'

