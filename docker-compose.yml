version: '2.4'

networks: {}

volumes:
  resin-data: {}

x-common: &common
  tty: true
  restart: unless-stopped

services:
  # https://github.com/mcuadros/ofelia
  iwait:
    build:
      context: iwait
    depends_on:
      - ifeed
    <<: *common
    restart: always
    labels:
      io.balena.features.balena-socket: '1'

  ifeed:
    build:
      context: ifeed
    <<: *common
    restart: always
    entrypoint:
      - /bin/bash
      - -c
    command:
      - |
        set -axe

        function cleanup() {
            sleep infinity
        }
        trap cleanup EXIT

        exec ./main.py

    devices:
      - /dev/gpiomem
      - /dev/mem
    labels:
      io.balena.features.sysfs: '1'
      io.resin.features.kernel-modules: '1'
      io.balena.update.strategy: 'kill-then-download'

  istream:
    build:
      context: istream
    <<: *common
    cap_add:
      - NET_ADMIN
      - SYS_ADMIN
      - SYS_RESOURCE
    security_opt:
      - apparmor:unconfined
      - seccomp:unconfined
    entrypoint:
      - /bin/bash
      - -c
    command:
      - |
        set -axe

        function cleanup() {
            rm -f "${IWATCH_STILL}"
            sleep infinity
        }
        trap cleanup EXIT

        H264_PROFILE=${H264_PROFILE:-baseline}
        VIDEO_WIDTH=${VIDEO_WIDTH:-640}
        VIDEO_HEIGHT=${VIDEO_HEIGHT:-360}
        VIDEO_FRAMERATE=${VIDEO_FRAMERATE:-25}
        VIDEO_BITRATE=${VIDEO_BITRATE:-500000}
        KEYFRAME_RATE=${KEYFRAME_RATE:-50}

        # audio not used
        AUDIO_SAMPLE_RATE=${AUDIO_SAMPLE_RATE:-44100}

        # (RPi Zero W) begin only when balena-supervisor is idle
        if cat </proc/cpuinfo | grep -q 'Raspberry Pi Zero W'; then
            update_pending=true
            until [[ "$update_pending" =~ false ]]; do
                update_pending="$(curl --silent --retry 3 --fail \
                  "${BALENA_SUPERVISOR_ADDRESS}/v1/device?apikey=${BALENA_SUPERVISOR_API_KEY}" \
                  -H "Content-Type:application/json" | jq -r '.update_pending')"
                echo "update_pending: ${update_pending}"
                sleep "$(( (RANDOM % 10) + 10 ))s"
            done
        fi

        # https://medium.com/@allanlei/streaming-your-raspberrypi-camera-6ad02edcaae7
        if [[ -n "$RTMP_STREAM_URL" ]]; then
            exec raspivid -n -t 0 -fl -hf -o - \
              -w "${VIDEO_WIDTH}" \
              -h "${VIDEO_HEIGHT}" \
              -fps "${VIDEO_FRAMERATE}" \
              -b "${VIDEO_BITRATE}" \
              -pf "${H264_PROFILE}" \
              -g "${KEYFRAME_RATE}" \
              | ffmpeg \
              -f lavfi \
              -i "anullsrc=channel_layout=stereo:sample_rate=${AUDIO_SAMPLE_RATE}" \
              -i pipe:0 \
              -c:v copy \
              -c:a aac \
              -strict experimental \
              -f flv "${RTMP_STREAM_URL}"

        # capture stills
        elif [[ -n "$IWATCH_STILL" ]]; then
            exec raspistill --verbose --nopreview \
              --output "${IWATCH_STILL}" \
              --timelapse 60000
        else
            false
        fi

    volumes:
      - 'resin-data:/data'
    devices:
      - /dev/vchiq
      - /dev/video0
      - /dev/dma_heap
      - /dev/vcsm-cma
    labels:
      io.balena.features.supervisor-api: '1'
      io.balena.features.sysfs: '1'
      io.balena.update.strategy: 'kill-then-download'
      io.resin.features.kernel-modules: '1'

  iwatch:
    build:
      context: iwatch
    <<: *common
    entrypoint:
      - /bin/bash
      - -c
    command:
      - |
        set -axe

        function cleanup() {
            sleep infinity
        }
        trap cleanup EXIT

        # serve static HTML
        if [[ -n "$IWATCH_HTML" ]]; then
            echo "${IWATCH_HTML}" > iwatch.html

            while true; do
                echo -e 'HTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n' \
                  | cat - iwatch.html | nc -l -p 8080 -q 0; sleep 1s;
            done

        # .. or serve HTTP redirect
        elif [[ -n "$IWATCH_URL" ]]; then
            while true; do
                echo -e "HTTP/1.1 302 Found\r\nLocation: ${IWATCH_URL}\r\nConnection: close\r\n\r\n" \
                  | nc -l -p 8080 -q 0; sleep 1s;
            done

        # .. or just serve stills
        elif [[ -n "$IWATCH_STILL" ]]; then
            while true; do
                if [[ -f "$IWATCH_STILL" ]]; then
                    content_length="$(stat -c '%s' "${IWATCH_STILL}")"
                    echo -e "HTTP/1.1 200 OK\r\nContent-Type: image/x-png\r\nContent-Length: ${content_length}\r\n\r\n" \
                      | cat - "${IWATCH_STILL}" | nc -l -p 8080 -q 0; sleep 1s;
                else
                    sleep $(( (RANDOM % 15) + 15 ))
                fi
            done
        else
            false
        fi

    volumes:
      - 'resin-data:/data'
    ports:
      - '80:8080/tcp'
    labels:
      io.balena.update.strategy: 'kill-then-download'
