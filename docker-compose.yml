version: '2.4'

networks: {}

volumes:
  resin-data: {}

services:
  # https://github.com/mcuadros/ofelia
  iwait:
    build:
      context: iwait
    depends_on:
      - ifeed
    tty: true
    entrypoint:
      - /bin/sh
      - -c
    command:
      - |
        set -axe

        function cleanup() {
            rm -f "${globconfig}" "${jobconfig}" "${config}"
            sleep infinity
        }
        trap cleanup EXIT

        IFEED_SCHEDULE=${IFEED_SCHEDULE:-15 2 6 * * *}

        name="$(docker ps -q --filter 'name=ifeed*' --format '{{.Names}}')"

        globconfig="$(mktemp)"
        jobconfig="$(mktemp)"
        config="$(mktemp)"

        cat << EOF > "${globconfig}"
        [global]
        slack-only-on-error = true
        slack-webhook = ${IFEED_SLACK_WEBHOOK_URL}

        EOF

        cat << EOF >> "${jobconfig}"
        [job-exec "ifeed"]
        schedule = ${IFEED_SCHEDULE}
        container = ${name}
        command = /bin/bash -c 'pgrep python3.10 | xargs kill -s USR2'

        [job-local "self-immolate"]
        schedule = @every 15m
        command = kill -s SIGTERM 1
        EOF

        if [[ -n "$IFEED_SLACK_WEBHOOK_URL" ]]; then
            cat < "${globconfig}" > "${config}"
        fi
        cat < "${globconfig}" > "${config}"
        cat < "${jobconfig}" >> "${config}"
        cat < "${config}"

        ofelia daemon --config="${config}"

    restart: unless-stopped
    labels:
      io.balena.features.balena-socket: '1'

  ifeed:
    build:
      context: ifeed
    tty: true
    restart: unless-stopped
    volumes:
      - 'resin-data:/data'
    entrypoint:
      - /bin/bash
      - -c
    command:
      - |
        set -axe

        function cleanup() {
            sleep infinity
        }
        trap cleanup EXIT

        exec ./main.py "$@"

    devices:
      - /dev/gpiomem
      - /dev/mem
    labels:
      io.balena.features.sysfs: '1'
      io.resin.features.kernel-modules: '1'
      io.balena.update.strategy: 'kill-then-download'

  istream:
    build:
      context: istream
    tty: true
    restart: unless-stopped
    entrypoint:
      - /bin/bash
      - -c
    command:
      - |
        set -axe

        function cleanup() {
            sleep infinity
        }
        trap cleanup EXIT

        H264_PROFILE=${H264_PROFILE:-baseline}
        VIDEO_WIDTH=${VIDEO_WIDTH:-640}
        VIDEO_HEIGHT=${VIDEO_HEIGHT:-360}
        VIDEO_FRAMERATE=${VIDEO_FRAMERATE:-25}
        VIDEO_BITRATE=${VIDEO_BITRATE:-500000}
        KEYFRAME_RATE=${KEYFRAME_RATE:-50}

        # audio not used
        AUDIO_SAMPLE_RATE=${AUDIO_SAMPLE_RATE:-44100}

        # https://medium.com/@allanlei/streaming-your-raspberrypi-camera-6ad02edcaae7
        if [[ -n "$RTMP_STREAM_URL" ]]; then
            exec raspivid -n -t 0 -fl -hf -o - \
              -w "${VIDEO_WIDTH}" \
              -h "${VIDEO_HEIGHT}" \
              -fps "${VIDEO_FRAMERATE}" \
              -b "${VIDEO_BITRATE}" \
              -pf "${H264_PROFILE}" \
              -g "${KEYFRAME_RATE}" \
              | ffmpeg \
              -f lavfi \
              -i "anullsrc=channel_layout=stereo:sample_rate=${AUDIO_SAMPLE_RATE}" \
              -i pipe:0 \
              -c:v copy \
              -c:a aac \
              -strict experimental \
              -f flv "${RTMP_STREAM_URL}" \
              "$@"
        fi

    devices:
      - /dev/vchiq
      - /dev/video0
      - /dev/dma_heap
      - /dev/vcsm-cma
    labels:
      io.balena.features.sysfs: '1'
      io.resin.features.kernel-modules: '1'
      io.balena.update.strategy: 'kill-then-download'

  iwatch:
    build:
      context: iwatch
    tty: true
    restart: unless-stopped
    entrypoint:
      - /bin/bash
      - -c
    command:
      - |
        set -axe

        function cleanup() {
            sleep infinity
        }
        trap cleanup EXIT

        IWATCH_URL=${IWATCH_URL:-https://pet-a-manger.pages.dev/}

        if [[ -n "$IWATCH_HTML" ]]; then
            echo "${IWATCH_HTML}" > iwatch.html

            while true; do
                echo -e 'HTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n' \
                  | cat - iwatch.html | nc -l -p 8080 -q 0; sleep 1s;
            done
        else
            while true; do
                echo -e "HTTP/1.1 302 Found\r\nLocation: ${IWATCH_URL}\r\nConnection: close\r\n\r\n" \
                  | nc -l -p 8080 -q 0; sleep 1s;
            done
        fi

    ports:
      - '80:8080/tcp'
    labels:
      io.balena.update.strategy: 'kill-then-download'
